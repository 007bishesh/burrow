// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/hyperledger/burrow/execution/pbtransactor/transactor.proto

package pbtransactor // import "github.com/hyperledger/burrow/execution/pbtransactor"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pbevents "github.com/hyperledger/burrow/execution/events/pbevents"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Params
type CallParam struct {
	From                 []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallParam) Reset()         { *m = CallParam{} }
func (m *CallParam) String() string { return proto.CompactTextString(m) }
func (*CallParam) ProtoMessage()    {}
func (*CallParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{0}
}
func (m *CallParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallParam.Unmarshal(m, b)
}
func (m *CallParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallParam.Marshal(b, m, deterministic)
}
func (dst *CallParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallParam.Merge(dst, src)
}
func (m *CallParam) XXX_Size() int {
	return xxx_messageInfo_CallParam.Size(m)
}
func (m *CallParam) XXX_DiscardUnknown() {
	xxx_messageInfo_CallParam.DiscardUnknown(m)
}

var xxx_messageInfo_CallParam proto.InternalMessageInfo

func (m *CallParam) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CallParam) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CallParam) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CallCodeParam struct {
	From                 []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Code                 []byte   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallCodeParam) Reset()         { *m = CallCodeParam{} }
func (m *CallCodeParam) String() string { return proto.CompactTextString(m) }
func (*CallCodeParam) ProtoMessage()    {}
func (*CallCodeParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{1}
}
func (m *CallCodeParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallCodeParam.Unmarshal(m, b)
}
func (m *CallCodeParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallCodeParam.Marshal(b, m, deterministic)
}
func (dst *CallCodeParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallCodeParam.Merge(dst, src)
}
func (m *CallCodeParam) XXX_Size() int {
	return xxx_messageInfo_CallCodeParam.Size(m)
}
func (m *CallCodeParam) XXX_DiscardUnknown() {
	xxx_messageInfo_CallCodeParam.DiscardUnknown(m)
}

var xxx_messageInfo_CallCodeParam proto.InternalMessageInfo

func (m *CallCodeParam) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CallCodeParam) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *CallCodeParam) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TransactParam struct {
	// The input account to sign with
	InputAccount *InputAccount `protobuf:"bytes,1,opt,name=inputAccount,proto3" json:"inputAccount,omitempty"`
	// The address of the contract to call, or omitted if creating a new contract
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// EVM bytecode payload to deliver
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// The maximum gas to provide to the EVM when running any code - provided in order to bound the computation time
	GasLimit uint64 `protobuf:"varint,4,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	// Value to transfer, where amount = value + fee
	Value uint64 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	// Fee to offer validators for processing transaction
	Fee                  uint64   `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactParam) Reset()         { *m = TransactParam{} }
func (m *TransactParam) String() string { return proto.CompactTextString(m) }
func (*TransactParam) ProtoMessage()    {}
func (*TransactParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{2}
}
func (m *TransactParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactParam.Unmarshal(m, b)
}
func (m *TransactParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactParam.Marshal(b, m, deterministic)
}
func (dst *TransactParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactParam.Merge(dst, src)
}
func (m *TransactParam) XXX_Size() int {
	return xxx_messageInfo_TransactParam.Size(m)
}
func (m *TransactParam) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactParam.DiscardUnknown(m)
}

var xxx_messageInfo_TransactParam proto.InternalMessageInfo

func (m *TransactParam) GetInputAccount() *InputAccount {
	if m != nil {
		return m.InputAccount
	}
	return nil
}

func (m *TransactParam) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *TransactParam) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactParam) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *TransactParam) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TransactParam) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type SendParam struct {
	InputAccount         *InputAccount `protobuf:"bytes,1,opt,name=inputAccount,proto3" json:"inputAccount,omitempty"`
	ToAddress            []byte        `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount               uint64        `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SendParam) Reset()         { *m = SendParam{} }
func (m *SendParam) String() string { return proto.CompactTextString(m) }
func (*SendParam) ProtoMessage()    {}
func (*SendParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{3}
}
func (m *SendParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendParam.Unmarshal(m, b)
}
func (m *SendParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendParam.Marshal(b, m, deterministic)
}
func (dst *SendParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendParam.Merge(dst, src)
}
func (m *SendParam) XXX_Size() int {
	return xxx_messageInfo_SendParam.Size(m)
}
func (m *SendParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SendParam.DiscardUnknown(m)
}

var xxx_messageInfo_SendParam proto.InternalMessageInfo

func (m *SendParam) GetInputAccount() *InputAccount {
	if m != nil {
		return m.InputAccount
	}
	return nil
}

func (m *SendParam) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *SendParam) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type TxParam struct {
	Tx                   []byte   `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxParam) Reset()         { *m = TxParam{} }
func (m *TxParam) String() string { return proto.CompactTextString(m) }
func (*TxParam) ProtoMessage()    {}
func (*TxParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{4}
}
func (m *TxParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxParam.Unmarshal(m, b)
}
func (m *TxParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxParam.Marshal(b, m, deterministic)
}
func (dst *TxParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxParam.Merge(dst, src)
}
func (m *TxParam) XXX_Size() int {
	return xxx_messageInfo_TxParam.Size(m)
}
func (m *TxParam) XXX_DiscardUnknown() {
	xxx_messageInfo_TxParam.DiscardUnknown(m)
}

var xxx_messageInfo_TxParam proto.InternalMessageInfo

func (m *TxParam) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type SignTxParam struct {
	Tx                   []byte            `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	PrivateAccounts      []*PrivateAccount `protobuf:"bytes,2,rep,name=privateAccounts,proto3" json:"privateAccounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SignTxParam) Reset()         { *m = SignTxParam{} }
func (m *SignTxParam) String() string { return proto.CompactTextString(m) }
func (*SignTxParam) ProtoMessage()    {}
func (*SignTxParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{5}
}
func (m *SignTxParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTxParam.Unmarshal(m, b)
}
func (m *SignTxParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTxParam.Marshal(b, m, deterministic)
}
func (dst *SignTxParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTxParam.Merge(dst, src)
}
func (m *SignTxParam) XXX_Size() int {
	return xxx_messageInfo_SignTxParam.Size(m)
}
func (m *SignTxParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTxParam.DiscardUnknown(m)
}

var xxx_messageInfo_SignTxParam proto.InternalMessageInfo

func (m *SignTxParam) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SignTxParam) GetPrivateAccounts() []*PrivateAccount {
	if m != nil {
		return m.PrivateAccounts
	}
	return nil
}

// Results
type SignedTx struct {
	Tx                   []byte   `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedTx) Reset()         { *m = SignedTx{} }
func (m *SignedTx) String() string { return proto.CompactTextString(m) }
func (*SignedTx) ProtoMessage()    {}
func (*SignedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{6}
}
func (m *SignedTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedTx.Unmarshal(m, b)
}
func (m *SignedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedTx.Marshal(b, m, deterministic)
}
func (dst *SignedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTx.Merge(dst, src)
}
func (m *SignedTx) XXX_Size() int {
	return xxx_messageInfo_SignedTx.Size(m)
}
func (m *SignedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTx.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTx proto.InternalMessageInfo

func (m *SignedTx) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type CallResult struct {
	Return               []byte   `protobuf:"bytes,1,opt,name=Return,proto3" json:"Return,omitempty"`
	GasUsed              uint64   `protobuf:"varint,2,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallResult) Reset()         { *m = CallResult{} }
func (m *CallResult) String() string { return proto.CompactTextString(m) }
func (*CallResult) ProtoMessage()    {}
func (*CallResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{7}
}
func (m *CallResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallResult.Unmarshal(m, b)
}
func (m *CallResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallResult.Marshal(b, m, deterministic)
}
func (dst *CallResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallResult.Merge(dst, src)
}
func (m *CallResult) XXX_Size() int {
	return xxx_messageInfo_CallResult.Size(m)
}
func (m *CallResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CallResult.DiscardUnknown(m)
}

var xxx_messageInfo_CallResult proto.InternalMessageInfo

func (m *CallResult) GetReturn() []byte {
	if m != nil {
		return m.Return
	}
	return nil
}

func (m *CallResult) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

type TxReceipt struct {
	TxHash               []byte   `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	CreatesContract      bool     `protobuf:"varint,2,opt,name=CreatesContract,proto3" json:"CreatesContract,omitempty"`
	ContractAddress      []byte   `protobuf:"bytes,3,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxReceipt) Reset()         { *m = TxReceipt{} }
func (m *TxReceipt) String() string { return proto.CompactTextString(m) }
func (*TxReceipt) ProtoMessage()    {}
func (*TxReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{8}
}
func (m *TxReceipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxReceipt.Unmarshal(m, b)
}
func (m *TxReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxReceipt.Marshal(b, m, deterministic)
}
func (dst *TxReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxReceipt.Merge(dst, src)
}
func (m *TxReceipt) XXX_Size() int {
	return xxx_messageInfo_TxReceipt.Size(m)
}
func (m *TxReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_TxReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_TxReceipt proto.InternalMessageInfo

func (m *TxReceipt) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *TxReceipt) GetCreatesContract() bool {
	if m != nil {
		return m.CreatesContract
	}
	return false
}

func (m *TxReceipt) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

type InputAccount struct {
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InputAccount) Reset()         { *m = InputAccount{} }
func (m *InputAccount) String() string { return proto.CompactTextString(m) }
func (*InputAccount) ProtoMessage()    {}
func (*InputAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{9}
}
func (m *InputAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputAccount.Unmarshal(m, b)
}
func (m *InputAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputAccount.Marshal(b, m, deterministic)
}
func (dst *InputAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputAccount.Merge(dst, src)
}
func (m *InputAccount) XXX_Size() int {
	return xxx_messageInfo_InputAccount.Size(m)
}
func (m *InputAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_InputAccount.DiscardUnknown(m)
}

var xxx_messageInfo_InputAccount proto.InternalMessageInfo

func (m *InputAccount) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *InputAccount) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type PrivateAccount struct {
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateAccount) Reset()         { *m = PrivateAccount{} }
func (m *PrivateAccount) String() string { return proto.CompactTextString(m) }
func (*PrivateAccount) ProtoMessage()    {}
func (*PrivateAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_transactor_97142763aca9e238, []int{10}
}
func (m *PrivateAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateAccount.Unmarshal(m, b)
}
func (m *PrivateAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateAccount.Marshal(b, m, deterministic)
}
func (dst *PrivateAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateAccount.Merge(dst, src)
}
func (m *PrivateAccount) XXX_Size() int {
	return xxx_messageInfo_PrivateAccount.Size(m)
}
func (m *PrivateAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateAccount.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateAccount proto.InternalMessageInfo

func (m *PrivateAccount) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func init() {
	proto.RegisterType((*CallParam)(nil), "pbtransactor.CallParam")
	proto.RegisterType((*CallCodeParam)(nil), "pbtransactor.CallCodeParam")
	proto.RegisterType((*TransactParam)(nil), "pbtransactor.TransactParam")
	proto.RegisterType((*SendParam)(nil), "pbtransactor.SendParam")
	proto.RegisterType((*TxParam)(nil), "pbtransactor.TxParam")
	proto.RegisterType((*SignTxParam)(nil), "pbtransactor.SignTxParam")
	proto.RegisterType((*SignedTx)(nil), "pbtransactor.SignedTx")
	proto.RegisterType((*CallResult)(nil), "pbtransactor.CallResult")
	proto.RegisterType((*TxReceipt)(nil), "pbtransactor.TxReceipt")
	proto.RegisterType((*InputAccount)(nil), "pbtransactor.InputAccount")
	proto.RegisterType((*PrivateAccount)(nil), "pbtransactor.PrivateAccount")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactorClient is the client API for Transactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactorClient interface {
	// Broadcast a signed and serialised transaction to the mempool
	BroadcastTx(ctx context.Context, in *TxParam, opts ...grpc.CallOption) (*TxReceipt, error)
	// Perform a 'simulated' call of a contract against the current committed EVM state without any changes been saved
	Call(ctx context.Context, in *CallParam, opts ...grpc.CallOption) (*CallResult, error)
	// Perform a 'simulated' execution of provided code against the current committed EVM state without any changes been saved
	CallCode(ctx context.Context, in *CallCodeParam, opts ...grpc.CallOption) (*CallResult, error)
	// Formulate a CallTx transaction signed server-side
	Transact(ctx context.Context, in *TransactParam, opts ...grpc.CallOption) (*TxReceipt, error)
	// Formulate a CallTx transaction signed server-side and wait for it to be included in a block, retrieving response
	TransactAndHold(ctx context.Context, in *TransactParam, opts ...grpc.CallOption) (*pbevents.EventDataCall, error)
	// Formulate a SendTx transaction signed server-side
	Send(ctx context.Context, in *SendParam, opts ...grpc.CallOption) (*TxReceipt, error)
	// Formulate a SendTx transaction signed server-side and wait for it to be included in a block, retrieving response
	SendAndHold(ctx context.Context, in *SendParam, opts ...grpc.CallOption) (*TxReceipt, error)
	// Sign a transaction server-side
	SignTx(ctx context.Context, in *SignTxParam, opts ...grpc.CallOption) (*SignedTx, error)
}

type transactorClient struct {
	cc *grpc.ClientConn
}

func NewTransactorClient(cc *grpc.ClientConn) TransactorClient {
	return &transactorClient{cc}
}

func (c *transactorClient) BroadcastTx(ctx context.Context, in *TxParam, opts ...grpc.CallOption) (*TxReceipt, error) {
	out := new(TxReceipt)
	err := c.cc.Invoke(ctx, "/pbtransactor.Transactor/BroadcastTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) Call(ctx context.Context, in *CallParam, opts ...grpc.CallOption) (*CallResult, error) {
	out := new(CallResult)
	err := c.cc.Invoke(ctx, "/pbtransactor.Transactor/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) CallCode(ctx context.Context, in *CallCodeParam, opts ...grpc.CallOption) (*CallResult, error) {
	out := new(CallResult)
	err := c.cc.Invoke(ctx, "/pbtransactor.Transactor/CallCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) Transact(ctx context.Context, in *TransactParam, opts ...grpc.CallOption) (*TxReceipt, error) {
	out := new(TxReceipt)
	err := c.cc.Invoke(ctx, "/pbtransactor.Transactor/Transact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) TransactAndHold(ctx context.Context, in *TransactParam, opts ...grpc.CallOption) (*pbevents.EventDataCall, error) {
	out := new(pbevents.EventDataCall)
	err := c.cc.Invoke(ctx, "/pbtransactor.Transactor/TransactAndHold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) Send(ctx context.Context, in *SendParam, opts ...grpc.CallOption) (*TxReceipt, error) {
	out := new(TxReceipt)
	err := c.cc.Invoke(ctx, "/pbtransactor.Transactor/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) SendAndHold(ctx context.Context, in *SendParam, opts ...grpc.CallOption) (*TxReceipt, error) {
	out := new(TxReceipt)
	err := c.cc.Invoke(ctx, "/pbtransactor.Transactor/SendAndHold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactorClient) SignTx(ctx context.Context, in *SignTxParam, opts ...grpc.CallOption) (*SignedTx, error) {
	out := new(SignedTx)
	err := c.cc.Invoke(ctx, "/pbtransactor.Transactor/SignTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactorServer is the server API for Transactor service.
type TransactorServer interface {
	// Broadcast a signed and serialised transaction to the mempool
	BroadcastTx(context.Context, *TxParam) (*TxReceipt, error)
	// Perform a 'simulated' call of a contract against the current committed EVM state without any changes been saved
	Call(context.Context, *CallParam) (*CallResult, error)
	// Perform a 'simulated' execution of provided code against the current committed EVM state without any changes been saved
	CallCode(context.Context, *CallCodeParam) (*CallResult, error)
	// Formulate a CallTx transaction signed server-side
	Transact(context.Context, *TransactParam) (*TxReceipt, error)
	// Formulate a CallTx transaction signed server-side and wait for it to be included in a block, retrieving response
	TransactAndHold(context.Context, *TransactParam) (*pbevents.EventDataCall, error)
	// Formulate a SendTx transaction signed server-side
	Send(context.Context, *SendParam) (*TxReceipt, error)
	// Formulate a SendTx transaction signed server-side and wait for it to be included in a block, retrieving response
	SendAndHold(context.Context, *SendParam) (*TxReceipt, error)
	// Sign a transaction server-side
	SignTx(context.Context, *SignTxParam) (*SignedTx, error)
}

func RegisterTransactorServer(s *grpc.Server, srv TransactorServer) {
	s.RegisterService(&_Transactor_serviceDesc, srv)
}

func _Transactor_BroadcastTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).BroadcastTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbtransactor.Transactor/BroadcastTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).BroadcastTx(ctx, req.(*TxParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbtransactor.Transactor/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).Call(ctx, req.(*CallParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_CallCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallCodeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).CallCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbtransactor.Transactor/CallCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).CallCode(ctx, req.(*CallCodeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_Transact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).Transact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbtransactor.Transactor/Transact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).Transact(ctx, req.(*TransactParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_TransactAndHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).TransactAndHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbtransactor.Transactor/TransactAndHold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).TransactAndHold(ctx, req.(*TransactParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbtransactor.Transactor/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).Send(ctx, req.(*SendParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_SendAndHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).SendAndHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbtransactor.Transactor/SendAndHold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).SendAndHold(ctx, req.(*SendParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactor_SignTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTxParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactorServer).SignTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbtransactor.Transactor/SignTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactorServer).SignTx(ctx, req.(*SignTxParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transactor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbtransactor.Transactor",
	HandlerType: (*TransactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastTx",
			Handler:    _Transactor_BroadcastTx_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Transactor_Call_Handler,
		},
		{
			MethodName: "CallCode",
			Handler:    _Transactor_CallCode_Handler,
		},
		{
			MethodName: "Transact",
			Handler:    _Transactor_Transact_Handler,
		},
		{
			MethodName: "TransactAndHold",
			Handler:    _Transactor_TransactAndHold_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Transactor_Send_Handler,
		},
		{
			MethodName: "SendAndHold",
			Handler:    _Transactor_SendAndHold_Handler,
		},
		{
			MethodName: "SignTx",
			Handler:    _Transactor_SignTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/hyperledger/burrow/execution/pbtransactor/transactor.proto",
}

func init() {
	proto.RegisterFile("github.com/hyperledger/burrow/execution/pbtransactor/transactor.proto", fileDescriptor_transactor_97142763aca9e238)
}

var fileDescriptor_transactor_97142763aca9e238 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x57, 0xd7, 0xac, 0x6b, 0x5f, 0xbb, 0x0d, 0x59, 0x30, 0xb2, 0x30, 0xa1, 0x29, 0xa7, 0x9e,
	0x5a, 0x34, 0x10, 0x02, 0x21, 0x06, 0x5d, 0x37, 0x36, 0x34, 0x90, 0xa6, 0x2c, 0x5c, 0xb8, 0xb9,
	0xf1, 0x5b, 0x17, 0xa9, 0x8d, 0x23, 0xc7, 0xd9, 0xb2, 0x23, 0x77, 0xbe, 0x14, 0xdf, 0x0c, 0xd9,
	0x71, 0xda, 0x26, 0xa5, 0xc0, 0x10, 0xa7, 0xbc, 0x3f, 0x3f, 0xff, 0xde, 0x3f, 0x3f, 0x07, 0x4e,
	0xc6, 0xa1, 0xbc, 0x4e, 0x47, 0xbd, 0x80, 0x4f, 0xfb, 0xd7, 0x77, 0x31, 0x8a, 0x09, 0xb2, 0x31,
	0x8a, 0xfe, 0x28, 0x15, 0x82, 0xdf, 0xf6, 0x31, 0xc3, 0x20, 0x95, 0x21, 0x8f, 0xfa, 0xf1, 0x48,
	0x0a, 0x1a, 0x25, 0x34, 0x90, 0x5c, 0xf4, 0xe7, 0x62, 0x2f, 0x16, 0x5c, 0x72, 0xd2, 0x59, 0x74,
	0x3b, 0xc7, 0x7f, 0x4b, 0x8a, 0x37, 0x18, 0xc9, 0xa4, 0x1f, 0x8f, 0x8c, 0x90, 0x7f, 0x72, 0x4e,
	0xf7, 0x33, 0xb4, 0x86, 0x74, 0x32, 0xb9, 0xa0, 0x82, 0x4e, 0x09, 0x01, 0xeb, 0x4a, 0xf0, 0xa9,
	0x5d, 0xdb, 0xaf, 0x75, 0x3b, 0x9e, 0x96, 0x89, 0x0d, 0x1b, 0x94, 0x31, 0x81, 0x49, 0x62, 0xaf,
	0x69, 0x73, 0xa1, 0x2a, 0x34, 0xa3, 0x92, 0xda, 0xf5, 0x1c, 0xad, 0x64, 0xf7, 0x1c, 0x36, 0x15,
	0xdd, 0x90, 0x33, 0x5c, 0x4d, 0x49, 0xc0, 0x0a, 0x38, 0x43, 0xc3, 0xa7, 0xe5, 0x5f, 0x92, 0xfd,
	0xa8, 0xc1, 0xa6, 0x6f, 0x0a, 0xce, 0xd9, 0x0e, 0xa1, 0x13, 0x46, 0x71, 0x2a, 0x07, 0x41, 0xc0,
	0xd3, 0x48, 0x6a, 0xd6, 0xf6, 0x81, 0xd3, 0x5b, 0x6c, 0x4c, 0xef, 0xe3, 0x02, 0xc2, 0x2b, 0xe1,
	0xef, 0x57, 0x0c, 0x71, 0xa0, 0x39, 0xa6, 0xc9, 0xa7, 0x70, 0x1a, 0x4a, 0xdb, 0xda, 0xaf, 0x75,
	0x2d, 0x6f, 0xa6, 0x93, 0x87, 0xb0, 0x7e, 0x43, 0x27, 0x29, 0xda, 0xeb, 0xda, 0x91, 0x2b, 0xe4,
	0x01, 0xd4, 0xaf, 0x10, 0xed, 0x86, 0xb6, 0x29, 0xd1, 0xfd, 0x56, 0x83, 0xd6, 0x25, 0x46, 0xec,
	0xff, 0xe4, 0xbf, 0x07, 0x2d, 0xc9, 0x07, 0xa5, 0x0a, 0xe6, 0x06, 0xb2, 0x03, 0x0d, 0x3a, 0xd5,
	0xbc, 0x75, 0x9d, 0x80, 0xd1, 0xdc, 0x5d, 0xd8, 0xf0, 0xb3, 0x3c, 0x81, 0x2d, 0x58, 0x93, 0x99,
	0x19, 0xc6, 0x9a, 0xcc, 0x5c, 0x84, 0xf6, 0x65, 0x38, 0x8e, 0x56, 0xb8, 0xc9, 0x07, 0xd8, 0x8e,
	0x45, 0x78, 0x43, 0x25, 0x9a, 0x0c, 0x54, 0xd4, 0x7a, 0xb7, 0x7d, 0xb0, 0x57, 0x4e, 0xf9, 0xa2,
	0x04, 0xf2, 0xaa, 0x87, 0x5c, 0x07, 0x9a, 0x2a, 0x0c, 0x32, 0x3f, 0x5b, 0x4a, 0xe1, 0x10, 0x40,
	0x5d, 0x19, 0x0f, 0x93, 0x74, 0x22, 0x55, 0x0d, 0x1e, 0xca, 0x54, 0x44, 0x06, 0x61, 0x34, 0x35,
	0xb9, 0x53, 0x9a, 0x7c, 0x49, 0x90, 0xe9, 0xba, 0x2d, 0xaf, 0x50, 0xdd, 0x5b, 0x68, 0xf9, 0x99,
	0x87, 0x01, 0x86, 0xb1, 0x3e, 0xee, 0x67, 0x67, 0x34, 0xb9, 0x2e, 0x8e, 0xe7, 0x1a, 0xe9, 0xc2,
	0xf6, 0x50, 0x20, 0x95, 0x98, 0x0c, 0x79, 0x24, 0x05, 0x0d, 0xa4, 0xa6, 0x69, 0x7a, 0x55, 0xb3,
	0x46, 0x1a, 0xb9, 0x68, 0x74, 0x7e, 0x27, 0xaa, 0x66, 0xf7, 0x0c, 0x3a, 0x8b, 0xa3, 0x22, 0x4f,
	0x01, 0x4c, 0xdd, 0xe7, 0x78, 0x67, 0xe2, 0x2f, 0x58, 0x56, 0x5f, 0x3e, 0xf7, 0x19, 0x6c, 0x95,
	0x3b, 0xa8, 0xb8, 0x2e, 0x96, 0xb8, 0xe6, 0x96, 0x83, 0xef, 0x16, 0x80, 0x3f, 0xeb, 0x3f, 0x79,
	0x0b, 0xed, 0x23, 0xc1, 0x29, 0x0b, 0x68, 0x22, 0xfd, 0x8c, 0x3c, 0x2a, 0x4f, 0xc7, 0x4c, 0xd7,
	0x79, 0x5c, 0x35, 0x17, 0x5d, 0x7b, 0x0d, 0x96, 0x1a, 0x01, 0xa9, 0x00, 0x66, 0x0f, 0x83, 0x63,
	0x2f, 0x3b, 0xcc, 0xbc, 0x06, 0xd0, 0x2c, 0x16, 0x9e, 0x3c, 0x59, 0x46, 0xcd, 0x1e, 0x82, 0xdf,
	0x50, 0xbc, 0x87, 0x66, 0x51, 0x4a, 0x95, 0xa2, 0xb4, 0xfd, 0xab, 0xf3, 0x3f, 0x85, 0xed, 0x02,
	0x39, 0x88, 0xd8, 0x19, 0x9f, 0xb0, 0x3f, 0x13, 0x99, 0x57, 0xf0, 0x44, 0x7d, 0x8e, 0xa9, 0xa4,
	0xba, 0x01, 0xaf, 0xc0, 0x52, 0xcb, 0x5a, 0x6d, 0xc4, 0x6c, 0x81, 0x57, 0xa7, 0xf0, 0x0e, 0xda,
	0x0a, 0x55, 0x84, 0xbf, 0x3f, 0xc1, 0x1b, 0x68, 0xe4, 0x9b, 0x48, 0x76, 0x2b, 0x67, 0xe7, 0xfb,
	0xe9, 0xec, 0x2c, 0xbb, 0xd4, 0x4e, 0x1d, 0xbd, 0xfc, 0xfa, 0xe2, 0x5f, 0x7e, 0x31, 0xa3, 0x86,
	0xfe, 0x09, 0x3c, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0x51, 0xbd, 0x3d, 0xf0, 0xa1, 0x06, 0x00,
	0x00,
}
